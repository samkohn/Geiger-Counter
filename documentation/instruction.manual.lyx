#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass revtex4
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Geiger Counter Lab Analysis Software Instruction Manual"
\pdf_author "Raymond Ehlers and Sam Kohn"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Geiger Counter Lab Analysis Software
\end_layout

\begin_layout Author
Raymond Ehlers
\end_layout

\begin_layout Author Email
rje2114@columbia.edu
\end_layout

\begin_layout Author
Sam Kohn
\end_layout

\begin_layout Author Email
sjk2163@columbia.edu
\end_layout

\begin_layout Affiliation
Columbia University, Columbia College, Class of 2013
\end_layout

\begin_layout Abstract
The Geiger Counter analysis Software, written in Python, provides complete
 analysis from saved wave file to histograms of relevant quantities.
 This manual describes usage of Audacity for audio recording, as well as
 the usage of the Geiger Counter analysis software.
 In addition, this manual documents the code used in the software itself,
 allowing for potential future modification.
 This software was written for the E.
 K.
 A.
 Advanced Physics Lab at Columbia University.
\end_layout

\begin_layout Section
Recording Data
\end_layout

\begin_layout Standard
Based on the current experimental setup, data can be recorded through a
 simple 
\begin_inset Formula $3.5$
\end_inset

 mm audio jack.
 Be certain to plug in the USB connector from the voltage controller in
 addition to the 
\begin_inset Formula $3.5$
\end_inset

 mm plug into the microphone port of the computer.
 This may already be completed.
 See the lab manual for specific instructions on setup of the experiment.
\end_layout

\begin_layout Subsection
Audacity
\end_layout

\begin_layout Standard
Audacity (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://audacity.sourceforge.net/
\end_layout

\end_inset

) is a free, open source, cross platform tool for audio recording and editing.
 While in principle any any audio recording software would be sufficient,
 Audacity has a strong set of features, as well as good flexibility and
 usability, such that it good choice for this lab.
 To record in Audacity, it is as simple as pressing the large, red record
 button near the middle of the upper interface, which can be seen in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Audacity-upper-interface"

\end_inset

.
 However, a number of options must be setup to record the data correctly,
 which will be described below.
\end_layout

\begin_layout Subsection
Recording Data Using Audacity
\end_layout

\begin_layout Standard
To process the recorded data correctly, the sampling characteristics must
 be set before recording.
 To specify these settings, open the Audacity sampling preferences under
 
\begin_inset Formula $\mathtt{Edit->Preferences->Quality}$
\end_inset

 (or 
\begin_inset Formula $\mathtt{Audacity->Preferences->Quality}$
\end_inset

 on Mac OS X), and set the Default Sample Rate(recommended value of 
\begin_inset Formula $96000\ Hz$
\end_inset

) and Default Sample Format (this must be 
\begin_inset Formula $16$
\end_inset

-bit).
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/audacity.interface.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Audacity upper interface
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Audacity-upper-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before beginning to take data, the correct audio input must be established.
 This is set in the two drop-down menus to the right of the microphone icon.
 The drop-down menu is located in the lower toolbar of the upper part of
 the Audacity, and can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Audacity-upper-interface"

\end_inset

.
 The first drop-down menu, with the value of 
\begin_inset Quotes eld
\end_inset

Integrated Microphone Array
\begin_inset Quotes erd
\end_inset

 in the figure, determines the source of the audio.
 Finding the appropriate source is described in the lab manual.
 In short, unless you are very familiar with the computer, it is effectively
 trial and error.
 The drop-down menu to the farthest right must be set to 
\begin_inset Formula $1$
\end_inset

 (Mono) Input Channel.
 The voltage controller only outputs mono pulses, and an added signal may
 cause problems in the analysis software, so it is critical to ensure that
 Mono is selected.
\end_layout

\begin_layout Subsubsection
Timing the recording
\end_layout

\begin_layout Standard
While recording can be completed manual in Audacity, for this lab, it is
 convenient to set Audacity to record for a specified length of time.
 This will allow the student to avoid a need to edit the audio file after
 recording.
 This feature is accessible under 
\begin_inset Formula $\mathtt{Transport->Timer\ Record...}$
\end_inset

 See the lab manual to determine the appropriate duration to record for
 different samples.
 Clicking 
\begin_inset Quotes eld
\end_inset

OK
\begin_inset Quotes erd
\end_inset

 will begin the recording.
\end_layout

\begin_layout Subsubsection
Exporting the Audio Data
\end_layout

\begin_layout Standard
After the data has been collected, it can be saved in an Audacity file,
 but this will not be useful for analysis.
 Instead, the data must be exported as a 
\begin_inset Formula $16$
\end_inset

-bit signed wave file.
 To export the data, select 
\begin_inset Formula $\mathtt{File->Export}$
\end_inset

.
 In the dialog box, be certain to change the 
\begin_inset Quotes eld
\end_inset

Save as type
\begin_inset Quotes erd
\end_inset

 drop-down menu to 
\begin_inset Quotes eld
\end_inset

WAV (Microsoft) signed 16 bit PCM.
\begin_inset Quotes erd
\end_inset

 After this has been selected, choose the location and file name for your
 data, and save it.
 The data file is now ready to be analyzed.
\end_layout

\begin_layout Subsubsection
The Waveform in Audacity
\end_layout

\begin_layout Standard
One benefit of Audacity is that it illustrates the waveform of the data,
 allowing users to investigate the shape of the waveform, similar to an
 oscilloscope.
 Based on this display, a number of properties may be determined.
 The shape of the waveform will be determined by the specific Geiger counter,
 as well as the performance of the sound card recording the data.
 An example of the same pulse in recorded by two different sound cards can
 be seen in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unclipped-waveform"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clipped-wavform"

\end_inset

.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unclipped-waveform"

\end_inset

, the waveform is not clipped (truncated in amplitude) in the recording,
 so all of the features of the waveform can clearly be seen.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clipped-wavform"

\end_inset

, the amplitude of waveform is clipped, such that some of the features cannot
 be seen.
 However, either type of waveform should be acceptable for analysis.
 It is important to note the relative scale on the left of both images as
 a check of the threshold value.
 The analysis software depends on a user determined threshold for the necessary
 height of a pulse to be considered a count by the software.
 The Audacity scale is an arbitrary scale from 
\begin_inset Formula $0$
\end_inset

 to 
\begin_inset Formula $1$
\end_inset

, so the threshold can be calculated by multiply the fraction of the arbitrary
 height by 
\begin_inset Formula $32767$
\end_inset

 (the largest possible number in a signed 
\begin_inset Formula $16$
\end_inset

-bit integer).
 However, this scale is not particularly accurate, such that the threshold
 should be determined in the analysis software, rather than based on the
 Audacity scale.
 This process is described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Calibrate-.wav-importer"

\end_inset

.
 Despite the inaccuracy of the Audacity scale, it is still useful as a sanity
 check to ensure that the threshold is reasonable.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/waveform.unclipped.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Unclipped waveform
\begin_inset CommandInset label
LatexCommand label
name "fig:Unclipped-waveform"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/waveform.clipped.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Clipped wavform
\begin_inset CommandInset label
LatexCommand label
name "fig:Clipped-wavform"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Waveforms in Audacity
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Analysis Software
\end_layout

\begin_layout Standard
First, software usage will be discussed, followed by a more technical discussion
 of the code.
 This analysis code was written by Raymond Ehlers and Sam Kohn, CC 2013.
 If major issues are encountered, feel free to contact either of us.
\end_layout

\begin_layout Subsection
Analysis Functionality
\begin_inset CommandInset label
LatexCommand label
name "sub:Analysis-Functionality"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/GUI.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Geiger Counter analysis software
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Geiger-Counter"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The analysis software can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Geiger-Counter"

\end_inset

.
 It can be started by double clicking on the shortcut 
\begin_inset Formula $\mathtt{GC}\: Analysis$
\end_inset

 in the main directory in Windows (if that does not work, double click on
 
\begin_inset Formula $\mathtt{GUI.py}$
\end_inset

.
 For more information, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Further-Documentation"

\end_inset

, including running in a python interpreter, or on a Mac or Linux system).
 There are a large number of functions, accessible through buttons on the
 right.
 The button on the left quits the program.
 There is a status indicator at the bottom that dynamically updates based
 on the progress in analyzing the wave file.
 The following operations describe the operation of the analysis software.
\end_layout

\begin_layout Subsubsection
Calibrate .wav importer
\begin_inset CommandInset label
LatexCommand label
name "sub:Calibrate-.wav-importer"

\end_inset


\end_layout

\begin_layout Standard
The input for this function is a wave file taken with a source in the Geiger
 counter.
 Further, it must included at least one full count within the first 
\begin_inset Formula $5$
\end_inset

 seconds of the file.
 This will return a display of the maximum pulse height, along with the
 values surrounding it.
 The student should calculate 
\begin_inset Formula $90\%$
\end_inset

 of the pulse height.
 This is the threshold.
 If any of the variables in the experiment change (ie.
 voltage, sample rate, etc), this threshold should be recalculated.
 Therefore, it should generally be repeated at the beginning of each analysis
 of a wave file.
 If the file is imported from saved data, the threshold was already set
 when the analysis was completed originally and hence the threshold determined
 here is not necessary.
\end_layout

\begin_layout Subsubsection
Import .wav File
\end_layout

\begin_layout Standard
The input for this function is a wave file taken with a source in the Geiger
 counter, for a length determined by information in the lab manual.
 After the file is chosen, the threshold value, a number between 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $32767$
\end_inset

, which was determined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Calibrate-.wav-importer"

\end_inset

, must be input.
 The software will analyze the entire wave file, producing a data set.
 Note: this can take quite a bit of time and processing power (on our modern
 laptops, we were processing about 
\begin_inset Formula $1$
\end_inset

 second of data in 
\begin_inset Formula $1$
\end_inset

 second).
 Therefore, it is important to be patient.
 The progress is displayed at the bottom of the window.
\end_layout

\begin_layout Subsubsection
Import Saved Data
\end_layout

\begin_layout Standard
If analysis has already been completed and the data set was saved, the data
 set can be imported through this function.
 Because it has already been analyzed, the import should be instantaneous.
 Consequently, it is highly recommended to save each data set after it has
 been analyzed initially.
\end_layout

\begin_layout Subsubsection
Save Data to Disk
\begin_inset CommandInset label
LatexCommand label
name "sub:Save-Data-to-Disk"

\end_inset


\end_layout

\begin_layout Standard
Once the initial import analysis is complete, this function allow a student
 to save the analyzed data to disk.
 This function is extremely useful, as it allows the student to re-import
 the data set in the future without having to rerun the long initial analysis
 function.
 Note: This function exports in a binary format.
 For an export of the raw data, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Export-Data-in-Plaintext"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Export Data in Plaintext
\begin_inset CommandInset label
LatexCommand label
name "sub:Export-Data-in-Plaintext"

\end_inset


\end_layout

\begin_layout Standard
This button exports the current data set into a CSV (comma-separated values)
 file for use with other data analysis software.
 The format is one line of header, followed by each count time on its own
 line.
 The only input is the save location, accessible through the file chooser
 dialog window.
 Data cannot be re-imported into the analysis software based on this file
 format.
\end_layout

\begin_layout Subsubsection
Plot Count Rate vs Time
\end_layout

\begin_layout Standard
This button plots a graph of the count rate as a function of time for the
 current data set.
 The only input is the sample size, which represents the duration over which
 the count rate is calculated for each point on the graph.
 For example, for a 
\begin_inset Formula $\unit[100]{s}$
\end_inset

 data set and 
\begin_inset Formula $\unit[1]{s}$
\end_inset

 sample size, the graph will have 
\begin_inset Formula $100$
\end_inset

 points, each identifying the average count rate over the 
\begin_inset Formula $\unit[1]{s}$
\end_inset

 duration beginning at that point.
\end_layout

\begin_layout Subsubsection
Plot Count Rate Histogram
\end_layout

\begin_layout Standard
This button plots a histogram of the count rates of the current data set.
 The two inputs are sample size and number of bins in the histogram.
 The sample size represents the duration over which the count rate is calculated
 for each element of the histogram.
 For example, for a 
\begin_inset Formula $\unit[100]{s}$
\end_inset

 data set and 
\begin_inset Formula $\unit[1]{s}$
\end_inset

 sample size, the histogram will contain 
\begin_inset Formula $100$
\end_inset

 elements, each containing the average count rate over a particular 
\begin_inset Formula $\unit[1]{s}$
\end_inset

 segment of the data set.
\end_layout

\begin_layout Subsubsection
Plot Intervals Histogram
\end_layout

\begin_layout Standard
This button plots a histogram of the time interval between consecutive counts
 in the current data set---so if there are 
\begin_inset Formula $N$
\end_inset

 total counts, there will be 
\begin_inset Formula $N-1$
\end_inset

 elements in the histogram.
 The only input is the number of bins in the histogram.
\end_layout

\begin_layout Subsubsection
Get Total Counts
\end_layout

\begin_layout Standard
This button opens a window displaying the total number of counts in the
 current data set.
\end_layout

\begin_layout Subsection
Further Documentation
\begin_inset CommandInset label
LatexCommand label
name "sub:Further-Documentation"

\end_inset


\end_layout

\begin_layout Paragraph
This section assumes some familiarity with programming and computers.
 If the student is not familiar, section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Analysis-Functionality"

\end_inset

 should be sufficient.
\begin_inset Newline newline
\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
I needed a new line, so this seemed like the best way to do it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The analysis software can be found on Github at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/musicalrunner/Geiger-Counter
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The analysis software is written in Python, and is dependent on a number
 of built in Python modules, such as Tkinter, CSV and Pickle.
 In addition, the software depends on the third party MatPlotLib and SciPy
 modules.
 For Windows, the easiest way to install these modules is with a third party
 Python installation, such as 
\begin_inset Formula $\mathtt{Python(x,y)}$
\end_inset

 (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/p/pythonxy/
\end_layout

\end_inset

).
 For Mac or Linux, it is best to utilize pip, utilizing the commands 
\begin_inset Formula $\mathtt{pip\ install\ matplotlib}$
\end_inset

 and 
\begin_inset Formula $\mathtt{pip\ install\ scipy}$
\end_inset

.
 Pip can be installed following the instructions listed at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.pip-installer.org/en/latest/
\end_layout

\end_inset

.
 While Windows users could use pip, or *nix users could utilize a third
 party python installation, the approaches recommended above have yielded
 the best results for us.
\end_layout

\begin_layout Subsubsection
Code structure
\end_layout

\begin_layout Standard
The code structure centers around three files, 
\begin_inset Formula $\mathtt{GUI.py}$
\end_inset

, 
\begin_inset Formula $\mathtt{PlotData.py}$
\end_inset

 and 
\begin_inset Formula $\mathtt{analyzeData.py}$
\end_inset

.
 GUI is the front end, which utilizes the analyzeData Python module and
 the PlotData graphing module.
 The analyzeData module implements the back-end functionality through an
 object called DataSet.
 The methods and members of the both files can be seen in 
\begin_inset Formula $\mathtt{./documentation/GUI.html}$
\end_inset

 and 
\begin_inset Formula $\mathtt{./documentation/analyzeData.html}$
\end_inset

.
 These files are generated from documentation present in the source.
 The comments and documentation are quite thorough, and together form better
 documentation than could be explained otherwise.
\end_layout

\begin_layout Subsubsection
File Output and Formats
\end_layout

\begin_layout Standard
As alluded to above there are a few different ways to export data from the
 analysis software.
 The Save Data to Disk function, described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Save-Data-to-Disk"

\end_inset

, saves the object using the Python Pickle module.
 The Pickle module creates a pseudo-binary file, which can be read in plain
 text, but is not a format conducive to parsing.
 Further, if the members of the DataSet object are changed, it cannot be
 guaranteed that Pickle will correctly re-expand the DataSet object to a
 functional state.
 In summary, you can edit the DataSet object members, but it must be done
 carefully with lots of testing for backwards compatibility.
 Despite these potential difficulties, Pickle is preferred method, as it
 greatly simplifies the I/O process.
\end_layout

\begin_layout Standard
If one desires to do analysis using another analysis package on the counts
 without such overhead, the data can be exported into a CSV, return separated
 file using the Export Data in Plaintext function described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Export-Data-in-Plaintext"

\end_inset

.
 The file format is described in that section.
 As noted, it cannot be re-imported into the GC Analysis software.
 It should be fairly trivial to implement the import process for the count
 times, but one may be left without necessary values for a full DataSet
 object, such as sample rate.
 It is much simpler (and already implemented) to use Save Data to Disk instead.
\end_layout

\begin_layout Subsubsection
Building Executables
\end_layout

\begin_layout Standard
There is currently code to build executables in Windows and Mac OS X.
 Building packages in Windows in fairly fragile and complicated.
 The Windows build utilizes 
\begin_inset Formula $\mathtt{cx\_freeze}$
\end_inset

, and should work fine for any Python 
\begin_inset Formula $2.7$
\end_inset

 system, although it cannot be guaranteed.
 
\begin_inset Formula $\mathtt{Python(x,y)}$
\end_inset

 includes Python 
\begin_inset Formula $2.7$
\end_inset

 and 
\begin_inset Formula $\mathtt{cx\_freeze}$
\end_inset

 as part of the default distribution.
 The package is built with 
\begin_inset Formula $\mathtt{python\ cx\_setup.py\ build}$
\end_inset

 .
 Options can be changed in 
\begin_inset Formula $\mathtt{cx\_setup.py}$
\end_inset

 if desired.
 If everything is built correctly, the executable should be under 
\begin_inset Formula $\mathtt{./build/exe.win32-2.7/GUI.exe}$
\end_inset

 .
 The 
\begin_inset Formula $\mathtt{GC\ Analysis}$
\end_inset

 shortcut should continue to work, assuming a 
\begin_inset Formula $32$
\end_inset

-bit install of Python 
\begin_inset Formula $2.7$
\end_inset

 (which can be installed on a 
\begin_inset Formula $64$
\end_inset

-bit system).
\end_layout

\begin_layout Standard
The Mac package is built with 
\begin_inset Formula $\mathtt{py2app}$
\end_inset

, which may be installed with pip.
 The package can be generated with by starting in the 
\begin_inset Formula $\mathtt{./py2app/}$
\end_inset

 folder, running 
\begin_inset Formula $\mathtt{py2applet}\ {\textstyle --}\mathtt{make}\text{-}\mathtt{setup\ GUI.py}$
\end_inset

, followed by 
\begin_inset Formula $\mathtt{python\ setup.py\ py2app}$
\end_inset

 .
 The documentation can be found at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html#tutorial
\end_layout

\end_inset

.
 The application can be found in 
\begin_inset Formula $\mathtt{./py2app/dist/}$
\end_inset

 .
\end_layout

\end_body
\end_document
